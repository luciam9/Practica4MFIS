load time.maude

fmod ID is 
    sort Id .
    protecting STRING .
    op id : String -> Id [ctor] .
endfm

view Id from TRIV to ID is
    sort Elt to Id .
endv

fmod FLOW is
    sort Flow .
    protecting ID .
    protecting POSRAT-TIME-DOMAIN-WITH-INF .

    op flow : Id Time -> Flow [ctor] .
endfm

view Flow from TRIV to FLOW is
    sort Elt to Flow .
endv

fmod GATEWAY is
    sort Gateway .
    op exclusive : -> Gateway [ctor] .
    op parallel : -> Gateway [ctor] .
endfm

fmod NODE is
    sort Node .
    protecting ID .
    protecting POSRAT-TIME-DOMAIN-WITH-INF .
    protecting GATEWAY .
    protecting SET{Id} .
    protecting STRING .
    subsort Id < Set{Id} .

    op start : Id Id -> Node [ctor] .
    op end : Id Id -> Node [ctor] .
    op task : Id String Id Id Time Set{Id} -> Node [ctor] .
    op split : Id Gateway Id Set{Id} -> Node [ctor] .
    op merge : Id Gateway Set{Id} Id -> Node [ctor] .
endfm

view Node from TRIV to NODE is
    sort Elt to Node .
endv

fmod RESOURCE is
    sort Resource .
    protecting ID .
    protecting NAT .
    op resource : Id Nat Nat -> Resource [ctor] .
endfm

view Resource from TRIV to RESOURCE is
    sort Elt to Resource .
endv

fmod TOKEN is
    sort Token .
    protecting ID .
    protecting POSRAT-TIME-DOMAIN-WITH-INF .
    op token : Id Time -> Token [ctor] .
endfm

view Token from TRIV to TOKEN is
    sort Elt to Token .
endv

mod PROCESS is
    sort Process .
    including CONFIGURATION . 
    protecting ID .
    protecting FLOW .
    protecting GATEWAY .
    protecting NODE .
    protecting RESOURCE .
    protecting TOKEN .
    protecting SET{Node} .
    protecting SET{Flow} .
    protecting SET{Token} .
    protecting SET{Resource} .
    subsort Process < Cid .
    subsort Node < Set{Node} .
    subsort Flow < Set{Flow} .
    subsort Token < Set{Token} .
    subsort Resource < Set{Resource} .
    
    op Process : -> Process [ctor] .
    op nodes:_ : Set{Node} -> Attribute [gather (&)] .
    op flows:_ : Set{Flow} -> Attribute [gather (&)] .
    op tokens:_ : Set{Token} -> Attribute [gather (&)] .
    op gtime:_ : Time -> Attribute [gather (&)] .
    op resources:_ : Set{Resource} -> Attribute [gather (&)] .

endm

mod BPMN-SEM is 
    protecting PROCESS .

    *** Variables
    var Id Id1 Id2 Id3 : Id .
    var o : Oid .
    var Atts : AttributeSet .
    var T T' : Time .
    var Nodes : Set{Node} .
    var Flows : Set{Flow} .
    var Tokens : Set{Token} .
    var Name : String .
    var Ids : Set{Id} .
    var Conf : Configuration .
    var TI TI' : TimeInf .
    var G : Gateway .
    var N : Node .
    var R : Set{Resource} .
    var M : Nat .

    *** Operaciones y Ecuaciones
    op none : -> Configuration [ctor] .

    op reduce : Set{Token} Time -> Set{Token} .
    eq reduce(empty, T) = empty .
    eq reduce((token(Id1, T'), Tokens), T) = (token(Id1, T' monus T), reduce(Tokens, T)) .

    op delta : Configuration Time -> Configuration .
    eq delta(none, T') = none .
    eq delta(< o : Process | gtime: T, tokens: Tokens, Atts >, T') = < o : Process | gtime: T plus T', tokens: reduce(Tokens, T'),  Atts > .

    op minimum : Set{Token} -> Token .
    eq minimum(empty) = empty .
    eq minimum(token(Id1, T)) = token(Id1, T) .
    ceq minimum((token(Id1, T), token(Id2, T'), Tokens)) = minimum((token(Id1, T), Tokens)) if T <= T' .
    ceq minimum((token(Id1, T), token(Id2, T'), Tokens)) = minimum((token(Id2, T'), Tokens)) if T' < T .

    op mte : Configuration -> TimeInf .
    eq mte(none) = INF .
    eq mte(< o : Process | tokens: Tokens, nodes: Nodes, Atts >) = getTime(minimum(readyTokens(Tokens, Nodes))) .

    op getTime : Token -> TimeInf .
    eq getTime(empty) = INF .
    eq getTime(token(Id1, T)) = T .

    op ready : Token Set{Node} Set{Token} -> Bool .
    eq ready(token(Id, T), empty, Tokens) = true .
    eq ready(token(Id, T), (end(Id, Id1), Nodes),Tokens) = false .
    eq ready(token(Id, 0), (merge(Id1, parallel, (Id,Ids), Id2), Nodes),Tokens) = checkMerge((Id,Ids),Tokens) .
    eq ready(token(Id, T), (N, Nodes),Tokens) =  ready(token(Id, T), Nodes,Tokens) .

    op readyTokens : Set{Token} Set{Node} -> Set{Token} .
    eq readyTokens(empty, Nodes) = empty .
    ceq readyTokens((token(Id, T), Tokens), Nodes) = (token(Id, T), readyTokens(Tokens, Nodes)) if ready(token(Id, T), Nodes,Tokens) .
    ceq readyTokens((token(Id, T), Tokens), Nodes) = readyTokens(Tokens, Nodes) if not(ready(token(Id, T), Nodes,Tokens)) .

    op getFlow : Set{Id} Set{Flow} -> Set{Flow} .
    eq getFlow (empty,empty) = empty .
    eq getFlow(empty, Flows) = empty .
    eq getFlow((Id1, Ids),Flows) = (getFlowById(Id1, Flows), getFlow(Ids, Flows)) . 

    op getFlowById : Id Set{Flow} -> Set{Flow} .
    eq getFlowById(Id1, (flow(Id1,T), Flows)) = flow(Id1, T) .
    eq getFlowById(Id1, (flow(Id2,T), Flows)) = getFlowById(Id1, Flows) .

    op generateToken : Set{Flow} -> Set{Token} .
    eq generateToken(empty) = empty .
    eq generateToken((flow(Id1, T), Flows)) = (token(Id1, T), generateToken(Flows)) .

    op checkMerge : Set{Id} Set{Token} -> Bool .
    eq checkMerge(empty, empty) = true .
    eq checkMerge(empty, Tokens) = true .
    eq checkMerge((Id1, Ids), Tokens) = ((checkMergeById(Id1, Tokens)) and checkMerge(Ids, Tokens)) .

    op checkMergeById : Id Set{Token} -> Bool .
    eq checkMergeById(Id1, empty) = false .
    eq checkMergeById(Id1, (token(Id1, 0), Tokens)) = true .
    eq checkMergeById(Id1, (token(Id2, T), Tokens)) = checkMergeById(Id1, Tokens) .

    op deleteTokens : Set{Id} Set{Token} -> Set{Token} .
    eq deleteTokens(empty, empty) = empty .
    eq deleteTokens(empty, Tokens) = Tokens .
    eq deleteTokens((Id1, Ids), (token(Id1, T), Tokens)) = deleteTokens(Ids, Tokens) .
    eq deleteTokens((Id1, Ids), (token(Id2, T), Tokens)) = deleteTokens(Ids, (deleteTokens(Id1, Tokens), token(Id2, T))) .

    op resourcesreadys : Set{Id} Set{Resource} -> Bool .
    eq resourcesreadys(empty, empty) = true .
    eq resourcesreadys(empty, R) = true .
    eq resourcesreadys((Id, Ids), (resource(Id, M, 0), R)) = false .
    eq resourcesreadys((Id, Ids), (resource(Id, M, 1), R)) = resourcesreadys(Ids, R) .

    op takeResourses : Set{Id} Set{Resource} -> Set{Resource} .
    eq takeResourses(empty, empty) = empty .
    eq takeResourses(empty, R) = R .
    eq takeResourses((Id, Ids), (resource(Id, M, 1), R)) = (resource(Id, M, 0), takeResourses(Ids, R))  .

    op returnResources : Set{Id} Set{Resource} -> Set{Resource} .
    eq returnResources(empty, empty) = empty .
    eq returnResources(empty, R) = R .
    eq returnResources((Id, Ids), (resource(Id, M, 0), R)) = (resource(Id, M, 1), returnResources(Ids, R))  .    
    *** Reglas

    *** La gestión del tiempo se gestionará con una regla tick.
    crl [tick] : < o : Process | gtime: T, tokens: Tokens, Atts > 
        => delta(< o : Process | gtime: T, tokens: Tokens, Atts >, T') if T' := mte(< o : Process | gtime: T, tokens: Tokens, Atts >) /\ 0 < T' /\ (T + T') <= 100 .

    *** Al comenzar la ejecución del proceso anterior tenemos un token en el nodo inicial, una vez su tiempo se hace 0, el token pasará al flujo de salId1a de dicho nodo inicial.
    rl [start-flow] : < o : Process | nodes: (start(Id1, Id2), Nodes), flows: (flow(Id2, T), Flows), tokens: (token(Id1, 0), Tokens), Atts > 
                  =>  < o : Process | nodes: (start(Id1, Id2), Nodes), flows: (flow(Id2, T), Flows), tokens: (token(Id2, T), Tokens), Atts > .
    
    *** Una vez se den las condiciones, el token será movId1o a la tarea, y cuando su temporizador sea cero, la ejecución de la misma terminará y el token podrá ser movId1o al flujo de salId1a de la misma.
    crl [flow-task] : < o : Process | nodes: (task(Id1, Name, Id2, Id3, T, Ids), Nodes), flows: (flow(Id2, T'), Flows), tokens: (token(Id2, 0), Tokens), resources: R, Atts > 
                  =>  < o : Process | nodes: (task(Id1, Name, Id2, Id3, T, Ids), Nodes), flows: (flow(Id2, T'), Flows), tokens: (token(Id1, T), Tokens), resources: takeResourses(Ids, R), Atts > if (resourcesreadys(Ids, R)) .  
    
    *** CUando un token se coloca en un flujo, este token se inicializa con el tiempo de retarso del flujo corresponsiente
    rl [task-flow] : < o : Process | nodes: (task(Id1, Name, Id2, Id3, T, Ids), Nodes), flows: (flow(Id3, T'), Flows), tokens: (token(Id1, 0), Tokens), resources: R, Atts > 
                 =>  < o : Process | nodes: (task(Id1, Name, Id2, Id3, T, Ids), Nodes), flows: (flow(Id3, T'), Flows), tokens: (token(Id3, T'), Tokens), resources: returnResources(Ids, R), Atts > .
    
    rl [flow-end] : < o : Process | nodes: (end(Id1, Id2), Nodes), flows: (flow(Id2, T), Flows), tokens: (token(Id2, 0), Tokens), Atts > 
                =>  < o : Process | nodes: (end(Id1, Id2), Nodes), flows: (flow(Id2, T), Flows), tokens: Tokens, Atts > .
    
    rl [flow-mergeE] : < o : Process | nodes: (merge(Id1, exclusive,(Id2, Ids), Id3), Nodes), flows: (flow(Id2, T), Flows), tokens: (token(Id2, 0), Tokens), Atts > 
                    => < o : Process | nodes: (merge(Id1, exclusive,(Id2, Ids), Id3), Nodes), flows: (flow(Id2, T), Flows), tokens: (token(Id1, 0), Tokens), Atts > .

    rl [merge-flow] : < o : Process | nodes: (merge(Id1, G, Ids, Id2), Nodes), flows: (flow(Id2, T), Flows), tokens: (token(Id1, 0), Tokens), Atts > 
                   => < o : Process | nodes: (merge(Id1, G, Ids, Id2), Nodes), flows: (flow(Id2, T), Flows), tokens: (token(Id2, T), Tokens), Atts > .

    rl [flow-split] : < o : Process | nodes: (split(Id1, G, Id3, (Id2, Ids)), Nodes), flows: (flow(Id3, T), Flows), tokens: (token(Id3, 0), Tokens), Atts > 
                   => < o : Process | nodes: (split(Id1, G, Id3, (Id2, Ids)), Nodes), flows: (flow(Id3, T), Flows), tokens: (token(Id1, 0), Tokens), Atts > .
    
    rl [splitE-flow] : < o : Process | nodes: (split(Id1, exclusive, Id3, (Id2, Ids)), Nodes), flows: (flow(Id2, T), Flows), tokens: (token(Id1, 0), Tokens), Atts > 
                    => < o : Process | nodes: (split(Id1, exclusive, Id3, (Id2, Ids)), Nodes), flows: (flow(Id2, T), Flows), tokens: (token(Id2, T), Tokens), Atts > .

    rl [splitP-flow] : < o : Process | nodes: (split(Id1, parallel, Id2, Ids), Nodes), flows: Flows, tokens: (token(Id1, 0), Tokens), Atts > 
                    => < o : Process | nodes: (split(Id1, parallel, Id2, Ids), Nodes), flows: Flows, tokens: (generateToken(getFlow(Ids, Flows)), Tokens), Atts > .    
    
    crl [flow-mergeP] : < o : Process | nodes: (merge(Id1, parallel, Ids, Id2), Nodes), flows: Flows, tokens: Tokens, Atts > 
                     => < o : Process | nodes: (merge(Id1, parallel, Ids, Id2), Nodes), flows: Flows, tokens: (token(Id1, 0), deleteTokens(Ids, Tokens)), Atts > if checkMerge(Ids, Tokens) .

endm
*** Los flujos tienen un retraso.

*** Un token activará una acción sólo si su temporizador está a cero.

*** Las tareas tienen una duración.

*** Mientras el temporizador no sea cero, este no podrá ser utilizado, modelando así la duración asociada a dicho flujo.

*** El comienzo de la ejecución de una tarea requerirá de un token con temporizador a cero en su flujo de entrada y disponer de todos los recursos necesarios.

*** Cuando hay un token con temporizador a cero en el flujo de entrada de una split parallel, su activación producirá un token en cada uno de los flujos de salId1a

*** La activación de un merge paralelo requiere un token con temporizador cero en cada uno de sus flujos de entrada.

*** El atributo resources contendrá el estado de los recursos.